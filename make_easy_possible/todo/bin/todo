#!/usr/bin/env ruby
#---
# Excerpted from "Build Awesome Command-Line Applications in Ruby 2",
# published by The Pragmatic Bookshelf.
# Copyrights apply to this code. It may not be used to create training material, 
# courses, books, articles, and the like. Contact us if you are in doubt.
# We make no guarantees that this code is fit for any purpose. 
# Visit http://www.pragmaticprogrammer.com/titles/dccar2 for more book information.
#---

$LOAD_PATH << File.expand_path(File.dirname(__FILE__) + '/../lib')
require 'gli'
require 'todo'
require 'todo/version'

include GLI::App

version Todo::VERSION

desc 'Path to the todo file'
arg_name "todo_file"
default_value todo_file(nil)
flag [:f,:filename]

desc 'Create a new task in the task list'
long_desc "
A task has a name and a priority. By default, new tasks have the lowest possible priority, though this can overridden
"

arg_name 'task_name'
command :new do |c|

  c.desc 'set the priority of the new task, 1 being the highest'
  c.arg_name 'priority'
  c.flag :p

  c.desc 'put the new task first in the list'
  c.switch :f

  c.action do |global_options,options,task_names|
    puts "Global:"
    puts "-f - #{global_options[:f]}"
    puts "Command:"
    puts "-f - #{options[:f] ? 'true' : 'false'}"
    puts "--priority - #{options[:priority]}"
    puts "task_names - #{task_names.join(',')}"

    TODO_FILE = todo_file(global_options[:f])

    File.open(TODO_FILE,'a') do |file|
      if task_names.empty?
        puts "Reading new tasks from stdin..."
        task_names = STDIN.readlines.map { |a| a.chomp }
      end

      tasks = 0

      task_names.each do |new_task|
        write_todo(file,new_task)
        puts "Task added."
        tasks += 1
      end

      if tasks == 0
        raise "You must provide tasks on the command-line or standard input"
      end
    end

  end
end

desc 'List tasks'
command [:list,:ls] do |c|

  c.desc 'Format of the output'
  c.arg_name 'csv|pretty'
  c.flag :format


  c.flag :s
  c.action do |global_options,options,args|
    #puts "Global:"
    #puts "-f - #{global_options[:f]}"
    #puts "Command:"
    #puts "-s - #{options[:s]}"
    if options[:format].nil?
      if STDOUT.tty?
        options[:format] = 'pretty'
      else
        options[:format] = 'csv'
      end
    end

    TODO_FILE = todo_file(global_options[:f])

    todos = read_todos(TODO_FILE)
    if options[:s] == 'name'
      todos = todos.sort { |a,b| a <=> b}
    end
    if options[:format] == 'csv'
      todos.each_with_index do |todo, counter|
        task,created,completed = todo.chomp.split(/,/)
        complete_flag = !completed.nil? ? "C" : "U"
        printf("%d,%s,%s,%s,%s\n",counter+1,task,complete_flag,created,completed)
      end
    elsif options[:format] == 'pretty'
      todos.each_with_index do |todo, counter|
        task,created,completed = todo.chomp.split(/,/)
        puts "#{counter}: #{task}"
        puts "Created: #{created}"
        puts "Completed: #{completed}" if completed
      end
    end
  end
end

desc ''
command :done do |c|
  c.action do |global_options,options,args|
    puts "Global:"
    puts "-f - #{global_options[:f]}"

    TODO_FILE = todo_file(global_options[:f])
    puts TODO_FILE
    todos = read_todos(TODO_FILE)
    task_number = args.shift
    puts task_number

    File.open("#{TODO_FILE}.new",'w') do |new_file|
      todos.each_with_index do |todo, counter|
        name,created,completed = todo.split(/,/)
        puts counter, name, created, completed
        if task_number.to_i == counter+1
          puts "match"
          write_todo(new_file,name,created,Time.now)
          puts "Task #{counter} completed"
        else
          write_todo(new_file,name,created,completed)
        end
      end
    end
    `mv #{TODO_FILE}.new #{TODO_FILE}`
  end
end

exit run(ARGV)
